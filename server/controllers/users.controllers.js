/**
 * CONTROLADOR DE USUARIOS
 * Maneja todas las operaciones relacionadas con los usuarios del sistema
 * 
 * Funcionalidades implementadas:
 * - Registro y autenticaci√≥n de usuarios
 * - Gesti√≥n CRUD de usuarios (crear, leer, actualizar, eliminar)
 * - Sistema de recuperaci√≥n de contrase√±as por email
 * - Generaci√≥n y validaci√≥n de tokens JWT
 * - Encriptaci√≥n de contrase√±as con bcrypt
 * - Validaci√≥n de primer usuario como administrador
 */

const { response } = require("express");          // Utilidades de Express
const User = require("../models/users.models");  // Modelo de usuarios Sequelize
const Report = require("../models/reports.models"); // Modelo de reportes
require("dotenv").config();                       // Cargar variables de entorno
const jwt = require("jsonwebtoken");              // Librer√≠a para generar tokens JWT
const bcrypt = require("bcryptjs");               // Librer√≠a para encriptar contrase√±as
const { transporter } = require('../config/emailConfig'); // Configuraci√≥n de email

/**
 * ALMAC√âN TEMPORAL DE C√ìDIGOS DE VERIFICACI√ìN
 * Guarda c√≥digos de recuperaci√≥n de contrase√±as en memoria
 * Estructura: { email: { code, expires, userId } }
 */
const verifyCodes = new Map();

/**
 * FUNCI√ìN PARA GENERAR TOKENS JWT
 * Crea un token de autenticaci√≥n con informaci√≥n del usuario
 * @param {number} id - ID del usuario
 * @param {string} role - Rol del usuario ('admin' o 'user')
 * @returns {string} Token JWT firmado
 */
const generateToken = (id, role) => {
    return jwt.sign(
        { id, role },                    // Payload del token
        process.env.JWT_SECRET,          // Clave secreta para firmar
        { expiresIn: '30d' }            // Token v√°lido por 30 d√≠as
    )
}

/**
 * CONTROLADOR PARA CREAR NUEVO USUARIO
 * Maneja el registro de nuevos usuarios en el sistema
 * Incluye validaciones, encriptaci√≥n de contrase√±as y verificaci√≥n de duplicados
 */
module.exports.createUser = async (req, res) => {
    // Extraer datos del cuerpo de la petici√≥n
    const { name, email, pass, role, estado, fechaNacimiento, bio, username } = req.body;

    // Validar que todos los campos obligatorios est√©n presentes (bio es opcional)
    if (!name || !email || !pass || !role || !estado || !fechaNacimiento || !username) {
        console.log(req.body);
        return res.status(400).json({ error: "Datos incompletos" });
    } else {
        // Verificar si el correo electr√≥nico ya est√° registrado
        const existingUser = await User.findOne({ where: { email } });
        if (existingUser) {
            return res.status(400).json({ error: "Correo ya registrado" });
        } else {
            // Encriptar la contrase√±a antes de guardarla
            const salt = await bcrypt.genSalt(10);          // Generar salt para mayor seguridad
            const hashedPassword = await bcrypt.hash(pass, salt); // Hash de la contrase√±a
            
            try {
                // Crear el nuevo usuario en la base de datos
                const newUser = await User.create({
                    name,
                    email,
                    pass: hashedPassword,    // Guardar contrase√±a encriptada
                    role,
                    estado,
                    fechaNacimiento,
                    bio,
                    username
                });

                // Responder con los datos del usuario creado (sin la contrase√±a)
                res.status(201).json({
                    id: newUser.id.toString(),
                    name: newUser.name,
                    email: newUser.email,
                    role: newUser.role,
                    estado: newUser.estado,
                    fechaNacimiento: newUser.fechaNacimiento ? newUser.fechaNacimiento.toISOString().split('T')[0] : "",
                    bio: newUser.bio,
                    username: newUser.username
                });

            } catch (err) {
                // Manejo de errores durante la creaci√≥n del usuario
                res.status(400).json({ error: "Error al crear usuario" });
            }
        }
    }
};


/**
 * CONTROLADOR PARA LOGIN DE USUARIO
 * Autentica las credenciales del usuario y genera un token JWT
 * Valida email y contrase√±a contra la base de datos
 */
module.exports.loginUser = async (req, res) => {
    const { email, pass } = req.body;
    
    try {
        // Buscar usuario por email en la base de datos
        const userFound = await User.findOne({ where: { email: email }});
        
        // Verificar que el usuario existe y la contrase√±a es correcta
        if (userFound && (await bcrypt.compare(pass, userFound.pass))) {
            console.log('Login exitoso para:', userFound.email);
            
            // Generar token JWT para el usuario autenticado
            const token = generateToken(userFound.id, userFound.role);
            
            // Logs para debugging del token generado
            console.log('üîë Token generado para:', userFound.email);
            console.log('üîë Token completo:', token);
            console.log('üîë Primeros 20 caracteres del token:', token.substring(0, 20) + '...');
            
            // Responder con informaci√≥n del usuario y token (sin contrase√±a)
            res.json({ 
                user: {
                    id: userFound.id,
                    name: userFound.name,
                    email: userFound.email,
                    role: userFound.role,
                    estado: userFound.estado,
                    fechaNacimiento: userFound.fechaNacimiento,
                    bio: userFound.bio,
                    username: userFound.username
                },
                token: token  // Token para autenticaci√≥n en futuras peticiones
            });
        } else {
            // Credenciales incorrectas
            res.status(401).json({ message: 'Credenciales incorrectas' });
        }
    } catch (error) {
        console.error('Error en login:', error);
        res.status(500).json({ message: 'Error interno del servidor' });
    }
}

/**
 * CONTROLADOR PARA OBTENER TODOS LOS USUARIOS
 * Devuelve una lista de todos los usuarios registrados
 * Excluye las contrase√±as por seguridad
 */
module.exports.getAllUsers = async (_, res) => {
    try {
        // Obtener todos los usuarios excluyendo el campo 'pass'
        const users = await User.findAll({
            attributes: { exclude: ['pass'] }  // No incluir contrase√±as en la respuesta
        });
        console.log(users.length)
        res.status(200).json(users);
    } catch (err) {
        // Manejo de errores al obtener usuarios
        res.status(500).json({ error: "Error interno del servidor" });
    }
};

/**
 * CONTROLADOR PARA OBTENER USUARIO POR ID
 * Busca y devuelve un usuario espec√≠fico por su ID
 * Excluye la contrase√±a por seguridad
 */
module.exports.getUserXId = async (req, res) => {
    try {
        // Buscar usuario por ID sin incluir la contrase√±a
        const user = await User.findOne({ 
            where: { id: req.params.id },
            attributes: { exclude: ['pass'] }
        });
        if (!user) {
            return res.status(404).json({ message: "Usuario no encontrado" });
        }
        res.json(user);
    } catch {
        res.status(500).json({ message: 'No se pudo obtener el usuario con esa id' });
    }
}

/**
 * CONTROLADOR PARA ACTUALIZAR ESTADO DE USUARIO
 * Permite cambiar el estado de un usuario (Activo/Silenciado)
 * Utilizado principalmente por administradores para moderar usuarios
 */
module.exports.updUserEstado = async (req, res) => {
    try {
        const { id } = req.params;
        const { estado } = req.body;
        
        console.log('Actualizando estado del usuario:', id, 'a:', estado);
        
        // Buscar usuario por ID
        const user = await User.findByPk(id);
        if (!user) {
            return res.status(404).json({ message: "Usuario no encontrado" });
        }
        
        // Actualizar solo el campo estado
        await user.update({ estado });
        
        res.json({ 
            message: "Estado actualizado correctamente",
            user: {
                id: user.id,
                name: user.name,
                email: user.email,
                estado: user.estado
            }
        });
    } catch (err) {
        console.error('Error actualizando estado:', err);
        res.status(500).json({ message: "Error interno del servidor" });
    }
};

/**
 * CONTROLADOR PARA ACTUALIZAR PERFIL DE USUARIO
 * Permite actualizar informaci√≥n del perfil incluyendo contrase√±a
 * Encripta la nueva contrase√±a si se proporciona
 */
module.exports.updUserPerfil = async (req, res) => {
    try {
        let updateData = { ...req.body };

        // Si se est√° actualizando la contrase√±a, encriptarla antes de guardar
        if (updateData.pass) {
            console.log('Cifrando nueva contrase√±a...');
            const salt = await bcrypt.genSalt(10);
            updateData.pass = await bcrypt.hash(updateData.pass, salt);
            console.log('Contrase√±a cifrada correctamente');
        }

        // Actualizar los datos del usuario en la base de datos
        const [updatedRowCount] = await User.update(updateData, {
            where: { id: req.params.id }
        });
        console.log('Filas actualizadas:', updatedRowCount);

        // Verificar si se actualiz√≥ alg√∫n registro
        if (updatedRowCount) {
            console.log("Usuario actualizado exitosamente");

            // Recuperar la informaci√≥n actualizada del usuario (sin contrase√±a)
            const updatedUser = await User.findOne({ 
                where: { id: req.params.id },
                attributes: { exclude: ['pass'] } // ‚úÖ Excluir contrase√±a de la respuesta
            });
            
            res.json({
                message: "Usuario actualizado exitosamente",
                user: updatedUser
            });
        } else {
            res.status(404).json({ message: "Usuario no encontrado" });
        }
    }
    catch (err) {
        console.error('Error al actualizar usuario:', err);
        res.status(500).json({ 
            message: 'No se pudo actualizar el usuario', 
            error: err.message 
        });
    }
}

// Eliminar usuario por ID (se modifico para que elimine los reportes asociados y asi no haya conflictos en la bdd)
module.exports.delUserXId = async (req, res) => {
    try {
        const userId = req.params.id;
        
        // Verificar si el usuario existe
        const user = await User.findOne({ where: { id: userId } });
        if (!user) {
            return res.status(404).json({ message: "Usuario no encontrado" });
        }

        // 1. Primero eliminar todos los reportes del usuario
        const deletedReports = await Report.destroy({
            where: { userId: userId }
        });

        // 2. Luego eliminar el usuario
        await User.destroy({ where: { id: userId } });

        // Respuesta con informaci√≥n de lo que se elimin√≥
        res.json({
            message: "Usuario eliminado exitosamente",
            deletedUser: user,
            deletedReportsCount: deletedReports
        });

    } catch (err) {
        console.error('Error al eliminar usuario:', err);
        res.status(500).json({ message: "No se pudo eliminar el usuario" });
    }
}

/**
 * C√ìDIGO COMENTADO - FUNCI√ìN DE LOGIN ANTERIOR
 * Esta funci√≥n estaba implementada pero se mantiene comentada
 * como referencia de una implementaci√≥n alternativa usando axios
 */
/*
// Funci√≥n para realizar el login del usuario
const loginUsuario = async (email, password) => {
    try {
        // Realiza la solicitud GET al endpoint de login
        const response = await axios.get(`http://localhost:8000/api/v1/auth/login`, {
            params: {
                email,
                password,
            }
        });

        if (response.status === 200) {
            // Si el login es exitoso, guarda los datos del usuario en el localStorage
            const usuario = response.data[0];  // Asumiendo que la respuesta es un arreglo con un √∫nico objeto
            localStorage.setItem("usuario", JSON.stringify(usuario)); // Guarda los datos en el localStorage

            // Devuelve el usuario para usar en otros componentes
            return usuario;
        }
    } catch (error) {
        if (error.response) {
            // Si la respuesta del servidor contiene un error
            const errorMessage = error.response.data.error || 'Error desconocido';
            throw new Error(errorMessage);
        } else {
            // Si no hay respuesta, es un error en la conexi√≥n
            throw new Error('Error al intentar conectar con el servidor');
        }
    }
};*/

/**
 * CONTROLADOR PARA CAMBIAR CONTRASE√ëA
 * Permite a un usuario cambiar su contrase√±a actual por una nueva
 * Valida la contrase√±a actual antes de permitir el cambio
 */
module.exports.cambiarPassword = async (req, res) => {
    const { id } = req.params;
    const { currentPassword, newPassword } = req.body;
    
    try {
        // Buscar el usuario en la base de datos
        const user = await User.findByPk(id);
        if (!user) {
            return res.status(404).json({ message: 'Usuario no encontrado' });
        }
        console.log('Usuario encontrado:', user.email);
        
        // Verificar que la contrase√±a actual sea correcta
        const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.pass);
        if (!isCurrentPasswordValid) {
            return res.status(400).json({ message: 'Contrase√±a actual incorrecta' });
        }
        
        // Cifrar la nueva contrase√±a
        const hashedNewPassword = await bcrypt.hash(newPassword, 10);
        
        // Actualizar la contrase√±a
        await user.update({ pass: hashedNewPassword });
        
        res.json({ 
            message: 'Contrase√±a actualizada exitosamente'
        });
    } catch (error) {
        console.error('Error al cambiar contrase√±a:', error);
        res.status(500).json({ message: 'Error interno del servidor' });
    }
}

// ‚úÖ Enviar c√≥digo de verificaci√≥n por email
module.exports.enviarCodigoRecuperacion = async (req, res) => {
    const { email } = req.body;
    
    try {
        if (!email || !email.trim()) {
            return res.status(400).json({ message: 'Email es requerido' });
        }

        const user = await User.findOne({ where: { email: email.trim() } });
        
        if (!user) {
            return res.json({ 
                message: 'Si el email existe, recibir√°s un c√≥digo de verificaci√≥n' 
            });
        }

        // Generar c√≥digo de 6 d√≠gitos
        const verifyCode = Math.floor(100000 + Math.random() * 900000).toString();
        const expiryTime = Date.now() + 900000; // 15 minutos

        // Guardar c√≥digo
        verifyCodes.set(email.trim(), {
            code: verifyCode,
            expires: expiryTime,
            userId: user.id
        });

        // Limpiar c√≥digos expirados
        for (const [key, value] of verifyCodes.entries()) {
            if (value.expires < Date.now()) {
                verifyCodes.delete(key);
            }
        }

        // Enviar email con c√≥digo
        const mailOptions = {
            from: 'tu_email@gmail.com', // Cambia por tu email
            to: email,
            subject: 'üîê C√≥digo de Recuperaci√≥n - Ponte Once',
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <div style="background: #007bff; color: white; padding: 20px; text-align: center;">
                        <h1>üö® Ponte Once - Recuperaci√≥n de Contrase√±a</h1>
                    </div>
                    <div style="padding: 20px; text-align: center;">
                        <h2>Hola ${user.name},</h2>
                        <p>Tu c√≥digo de recuperaci√≥n es:</p>
                        <h1 style="color: #007bff; font-size: 3em; margin: 20px 0;">${verifyCode}</h1>
                        <p><strong>Este c√≥digo expira en 15 minutos.</strong></p>
                        <p>Si no solicitaste esto, puedes ignorar este email.</p>
                    </div>
                </div>
            `
        };

        await transporter.sendMail(mailOptions);
        
        res.json({ 
            message: 'Si el email existe, recibir√°s un c√≥digo de verificaci√≥n'
        });
        
    } catch (error) {
        console.error('Error enviando c√≥digo:', error);
        res.status(500).json({ message: 'Error interno del servidor' });
    }
};

// ‚úÖ Verificar c√≥digo y cambiar contrase√±a
module.exports.verificarCodigoYCambiarPassword = async (req, res) => {
    const { email, code, newPassword } = req.body;
    
    try {
        if (!email || !code || !newPassword) {
            return res.status(400).json({ message: 'Todos los campos son requeridos' });
        }

        if (newPassword.length < 6) {
            return res.status(400).json({ 
                message: 'La contrase√±a debe tener al menos 6 caracteres' 
            });
        }

        // Verificar c√≥digo
        const codeData = verifyCodes.get(email.trim());
        
        if (!codeData || codeData.code !== code || codeData.expires < Date.now()) {
            return res.status(400).json({ 
                message: 'C√≥digo inv√°lido o expirado' 
            });
        }

        // Buscar usuario
        const user = await User.findByPk(codeData.userId);
        if (!user) {
            return res.status(404).json({ message: 'Usuario no encontrado' });
        }

        // Actualizar contrase√±a
        const hashedPassword = await bcrypt.hash(newPassword, 10);
        await user.update({ pass: hashedPassword });

        // Eliminar c√≥digo usado
        verifyCodes.delete(email.trim());

        res.json({ 
            message: 'Contrase√±a actualizada exitosamente' 
        });
        
    } catch (error) {
        console.error('Error verificando c√≥digo:', error);
        res.status(500).json({ message: 'Error interno del servidor' });
    }
};